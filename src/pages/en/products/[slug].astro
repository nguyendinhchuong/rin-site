---
import Layout from '@/layouts/Layout.astro';
import { sanityClient, urlFor } from '@/lib/sanity';
import { productQuery } from '@/lib/queries';
import { generateProductSchema, generateBreadcrumbSchema } from '@/lib/seo';
import { Button } from '@/components/ui/button';
import { SanityImage } from '@/components/SanityImage';

export const prerender = false;

const { slug } = Astro.params;
const locale = 'en';

const product = await sanityClient.fetch(productQuery, {
  slug,
  language: locale,
});

if (!product || product.status !== 'published') {
  return Astro.redirect('/en/products');
}

const siteUrl = Astro.site?.toString() || 'https://vinhson.com.vn';
const productUrl = `${siteUrl}/en/products/${slug}`;

const productSchema = generateProductSchema(
  product.name,
  product.description || '',
  productUrl,
  product.price,
  product.images?.[0] ? urlFor(product.images[0]).url() : undefined
);

const breadcrumbSchema = generateBreadcrumbSchema([
  { name: 'Home', url: `${siteUrl}/en` },
  { name: 'Products', url: `${siteUrl}/en/products` },
  { name: product.name, url: productUrl },
]);

const schema = {
  '@graph': [productSchema, breadcrumbSchema],
};
---

<Layout
  title={product.seo?.metaTitle || `${product.name} - Vinh Son`}
  description={product.seo?.metaDescription || product.description}
  image={product.images?.[0] ? urlFor(product.images[0]).url() : undefined}
  keywords={product.seo?.metaKeywords}
  type="product"
  schema={schema}
>
  <div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
      <!-- Product Images -->
      <div>
        {product.images && product.images.length > 0 ? (
          <div class="space-y-4">
            <div class="aspect-square overflow-hidden rounded-lg border">
              <SanityImage
                image={product.images[0]}
                alt={product.images[0].alt || product.name}
                width={800}
                height={800}
                className="h-full w-full object-cover"
                priority={true}
              />
            </div>
            {product.images.length > 1 && (
              <div class="grid grid-cols-4 gap-4">
                {product.images.slice(1, 5).map((image: any, index: number) => (
                  <div class="aspect-square overflow-hidden rounded-lg border">
                    <SanityImage
                      image={image}
                      alt={image.alt || `${product.name} - ${index + 2}`}
                      width={200}
                      height={200}
                      className="h-full w-full object-cover"
                    />
                  </div>
                ))}
              </div>
            )}
          </div>
        ) : (
          <div class="aspect-square rounded-lg border bg-muted" />
        )}
      </div>

      <!-- Product Details -->
      <div>
        <h1 class="mb-4 text-3xl font-bold md:text-4xl">{product.name}</h1>
        
        {product.category && (
          <p class="mb-2 text-sm text-muted-foreground">
            Category: <a href={`/en/products/category/${product.category.slug.current}`} class="hover:underline">{product.category.name}</a>
          </p>
        )}

        {product.price && (
          <p class="mb-6 text-3xl font-bold text-primary">{product.price.toLocaleString()} VND</p>
        )}

        {product.description && (
          <div class="mb-6">
            <p class="text-lg">{product.description}</p>
          </div>
        )}

        {product.features && product.features.length > 0 && (
          <div class="mb-6">
            <h2 class="mb-3 text-xl font-semibold">Key Features</h2>
            <ul class="space-y-2">
              {product.features.map((feature: string) => (
                <li class="flex items-start">
                  <svg class="mr-2 mt-1 h-5 w-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {product.specifications && product.specifications.length > 0 && (
          <div class="mb-6">
            <h2 class="mb-3 text-xl font-semibold">Specifications</h2>
            <dl class="space-y-2">
              {product.specifications.map((spec: any) => (
                <div class="flex border-b pb-2">
                  <dt class="w-1/3 font-medium">{spec.label}:</dt>
                  <dd class="w-2/3 text-muted-foreground">{spec.value}</dd>
                </div>
              ))}
            </dl>
          </div>
        )}

        <div class="flex gap-4">
          <Button size="lg" className="flex-1">
            Contact for Consultation
          </Button>
        </div>
      </div>
    </div>

    {product.content && product.content.length > 0 && (
      <div class="mt-12">
        <h2 class="mb-6 text-2xl font-bold">Detailed Description</h2>
        <div class="prose max-w-none">
          <!-- Content would be rendered here with portable text -->
        </div>
      </div>
    )}
  </div>
</Layout>

